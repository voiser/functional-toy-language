module runtime

interface Unit

interface Eq {
  eq : a+Eq, a -> Bool
}

interface Set[a] {
  size : this -> Int
}

interface Pair[l, r]

interface Num is Eq

native id       : a -> a
native do (do_) : (a -> b), a -> b
native add      : a+Num, a -> a
native sub      : a+Num, a -> a
native times    : a+Num, a -> a
native div      : a+Num, a -> a
native oneof    : a+Set[x] -> x
native list     : a -> List[a]
native cons     : a, List[a] -> List[a]
native nil      : List[a]
native dict     : a, b -> Dict[a, b]
native extend   : a, b, Dict[a, b] -> Dict[a, b]
native typeof   : a -> Str

class Str() is Eq

class Bool() is Eq

class Int() is Num

class Float() is Num

class List(x) is Set[x]

class Dict(k, v) is Set[Pair[k, v]]